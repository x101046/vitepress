import{_ as i,H as a,G as s,aj as t}from"./chunks/framework.JKCfv6x9.js";const g=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"q&a/html/index.md","filePath":"q&a/html/index.md","lastUpdated":1735093241000}'),e={name:"q&a/html/index.md"},l=t(`<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><h2 id="_1-什么是-doctype-有何作用" tabindex="-1">1. 什么是 DOCTYPE， 有何作用？ <a class="header-anchor" href="#_1-什么是-doctype-有何作用" aria-label="Permalink to &quot;1. 什么是 DOCTYPE， 有何作用？&quot;">​</a></h2><p>Doctype 是 HTML5 的文档声明，通过它可以告诉浏览器，使用哪一个 HTML 版本标准解析文档。在浏览器发展的过程中，HTML 出现过很多版本，不同的版本之间格式书写上略有差异。如果没有事先告诉浏览器，那么浏览器就不知道文档解析标准是什么？此时，大部分浏览器将开启最大兼容模式来解析网页，我们一般称为怪异模式，这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的 bug，所以文档声明是必须的。</p><h2 id="_2-说说对-html-语义化的理解" tabindex="-1">2. 说说对 html 语义化的理解 <a class="header-anchor" href="#_2-说说对-html-语义化的理解" aria-label="Permalink to &quot;2. 说说对 html 语义化的理解&quot;">​</a></h2><p>HTML 标签的语义化，简单来说，就是用正确的标签做正确的事情，给某块内容用上一个最恰当最合适的标签，使页面有良好的结构，页面元素有含义，无论是谁都能看懂这块内容是什么。 语义化的优点如下：</p><ul><li>在没有 CSS 样式情况下也能够让页面呈现出清晰的结构</li><li>有利于 SEO 和搜索引擎建立良好的沟通，有助于爬虫抓取更多的有效信息，爬虫是依赖于标签来确定上下文和各个关键字的权重</li><li>方便团队开发和维护，语义化更具可读性，遵循 W3C 标准的团队都遵循这个标准，可以减少差异化</li></ul><h2 id="_3-src-和-href-的区别" tabindex="-1">3. src 和 href 的区别 <a class="header-anchor" href="#_3-src-和-href-的区别" aria-label="Permalink to &quot;3. src 和 href 的区别&quot;">​</a></h2><p>src 和 href 都是 HTML 中特定元素的属性，都可以用来引入外部的资源。两者区别如下：</p><ul><li>src：全称 source，它通常用于 img、video、audio、script 元素，通过 src 指向请求外部资源的来源地址，指向的内容会嵌入到文档中当前标签所在位置，在请求 src 资源时，它会将资源下载并应用到文档内，比如说：js 脚本、img 图片、frame 等元素。当浏览器解析到该元素时，会暂停其它资源下载，直到将该资源加载、编译、执行完毕。这也是为什么将 js 脚本放在底部而不是头部的原因。</li><li>href：全称 hyper reference，意味着超链接，指向网络资源，当浏览器识别到它指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理，通常用于 a、link 元素。</li></ul><h2 id="_4-title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" tabindex="-1">4. title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？ <a class="header-anchor" href="#_4-title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" aria-label="Permalink to &quot;4. title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？&quot;">​</a></h2><ul><li>title 属性表示网页的标题，h1 元素则表示层次明确的页面内容标题，对页面信息的抓取也有很大的影响</li><li>strong 是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：strong 会重读，而 b 是展示强调内容</li><li>i 是 italic(斜体)的简写，是早期的斜体元素，表示内容展示为斜体，而 em 是 emphasize（强调）的简写，表示强调的文本</li></ul><h2 id="_5-什么是严格模式与混杂模式" tabindex="-1">5. 什么是严格模式与混杂模式？ <a class="header-anchor" href="#_5-什么是严格模式与混杂模式" aria-label="Permalink to &quot;5. 什么是严格模式与混杂模式？&quot;">​</a></h2><ul><li>严格模式：是以浏览器支持的最高标准运行</li><li>混杂模式：页面以宽松向下兼容的方式显示，模拟老式浏览器的行为</li></ul><h2 id="_6-前端页面有哪三层构成-分别是什么" tabindex="-1">6. 前端页面有哪三层构成，分别是什么？ <a class="header-anchor" href="#_6-前端页面有哪三层构成-分别是什么" aria-label="Permalink to &quot;6. 前端页面有哪三层构成，分别是什么？&quot;">​</a></h2><p>构成：结构层、表示层、行为层</p><ol><li>结构层（structural layer）结构层类似于盖房子需要打地基以及房子的悬梁框架，它是由 HTML 超文本标记语言来创建的，也就是页面中的各种标签，在结构层中保存了用户可以看到的所有内容，比如说：一段文字、一张图片、一段视频等等</li><li>表示层（presentation layer）表示层是由 CSS 负责创建，它的作用是如何显示有关内容，学名：层叠样式表，也就相当于装修房子，看你要什么风格的，田园的、中式的、地中海的，总之 CSS 都能办妥</li><li>行为层（behaviorlayer）行为层表示网页内容跟用户之间产生交互性，简单来说就是用户操作了网页，网页给用户一个反馈，这是 JavaScript 和 DOM 主宰的领域</li></ol><h2 id="_7-iframe-的作用以及优缺点" tabindex="-1">7. iframe 的作用以及优缺点 <a class="header-anchor" href="#_7-iframe-的作用以及优缺点" aria-label="Permalink to &quot;7. iframe 的作用以及优缺点&quot;">​</a></h2><p>iframe 也称作嵌入式框架，嵌入式框架和框架网页类似，它可以把一个网页的框架和内容嵌入到现有的网页中。 优点：</p><ul><li>可以用来处理加载缓慢的内容，比如：广告 缺点：</li><li>iframe 会阻塞主页面的 Onload 事件</li><li>iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。但是可以通过 JS 动态给 ifame 添加 src 属性值来解决这个问题，当然也可以解决 iframe 会阻塞主页面的 Onload 事件的问题</li><li>会产生很多页面，不易管理</li><li>浏览器的后退按钮没有作用</li><li>无法被一些搜索引擎识别</li></ul><h2 id="_8-meta-viewport-是做什么用的-怎么写" tabindex="-1">8.meta viewport 是做什么用的，怎么写？ <a class="header-anchor" href="#_8-meta-viewport-是做什么用的-怎么写" aria-label="Permalink to &quot;8.meta viewport 是做什么用的，怎么写？&quot;">​</a></h2><p>目的 是为了在移动端不让用户缩放页面使用的</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1, maximum-scale-1, minimum-scale=1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>解释每个单词的含义</p><ul><li>with=device-width 将布局视窗（layout viewport）的宽度设置为设备屏幕分辨率的宽度</li><li>initial-scale=1 页面初始缩放比例为屏幕分辨率的宽度</li><li>maximum-scale=1 指定用户能够放大的最大比例</li><li>minimum-scale=1 指定用户能够缩小的最大比例</li></ul><h2 id="_9-浏览器乱码的原因是什么-如何解决" tabindex="-1">9.浏览器乱码的原因是什么?如何解决? <a class="header-anchor" href="#_9-浏览器乱码的原因是什么-如何解决" aria-label="Permalink to &quot;9.浏览器乱码的原因是什么?如何解决?&quot;">​</a></h2><h3 id="编码格式不匹配" tabindex="-1">编码格式不匹配 <a class="header-anchor" href="#编码格式不匹配" aria-label="Permalink to &quot;编码格式不匹配&quot;">​</a></h3><p>浏览器打开网页时,需要根据网页源代码的编码格式来解码。如果网页的编码格式与浏览器的编码格式不匹配,就会出现乱码。比如,网页的编码格式为 UTF-8,而浏览器的编码格式是 GB2312,那么就会出现乱码。</p><h3 id="网页编码错误" tabindex="-1">网页编码错误 <a class="header-anchor" href="#网页编码错误" aria-label="Permalink to &quot;网页编码错误&quot;">​</a></h3><p>在编写网页的时候,如果编码出现错误,也会导致浏览器打开网页时出现乱码。比如,在写 HTML 代码时,如果忘记给中文字符指定编码格式,就会出现乱码。</p><h3 id="字体缺失" tabindex="-1">字体缺失 <a class="header-anchor" href="#字体缺失" aria-label="Permalink to &quot;字体缺失&quot;">​</a></h3><p>有些网页会使用比较特殊的字体,如果浏览器中没有这个字体,就会找不到对应的字符,从而出现乱码。</p><h2 id="_10-iframe-有那些优点和缺点" tabindex="-1">10.iframe 有那些优点和缺点? <a class="header-anchor" href="#_10-iframe-有那些优点和缺点" aria-label="Permalink to &quot;10.iframe 有那些优点和缺点?&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>可以在页面上独立显示一个页面或者内容,不会与页面其他元素产生冲突。</li><li>可以在多个页面中重用同一个页面或者内容,可以减少代码的冗余。</li><li>加载是异步的,页面可以在不等待 iframe 加载完成的情况下进行展示。</li><li>方便地实现跨域访问</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>搜索引擎可能无法正确解析 iframe 中的内容</li><li>会阻塞主页面的 onload 事件</li><li>和主页面共享连接池,影响页面并行加载</li></ul><h2 id="_11-html5-新特性" tabindex="-1">11.HTML5 新特性 <a class="header-anchor" href="#_11-html5-新特性" aria-label="Permalink to &quot;11.HTML5 新特性&quot;">​</a></h2><ul><li>语义化标签</li><li>增强型表单(如可以通过 input 的 type 属性指定类型是 color 还是 date 或者 url 等)</li><li>媒体元素标签(video,audio)</li><li>canvas,svg</li><li>svg 绘图</li><li>地理等位(navigator.geolocation.getCurrentPosition(callback))</li><li>拖放 API(给标签元素设置属性 draggable 值为 true,能够实现对目标元素的拖动)</li><li>Web Worker(可以开启一个子线程运行脚本)</li><li>Web Storage(即 sessionStorage 与 localStorage)</li><li>Websocket(双向通信协议,可以让浏览器接收服务端的请求)</li><li>dom 查询(document.querySelector()和 document.querySelectorAll())</li></ul><h2 id="_12-如何使用-html5-中的-canvas-元素绘制图形" tabindex="-1">12.如何使用 HTML5 中的 Canvas 元素绘制图形？ <a class="header-anchor" href="#_12-如何使用-html5-中的-canvas-元素绘制图形" aria-label="Permalink to &quot;12.如何使用 HTML5 中的 Canvas 元素绘制图形？&quot;">​</a></h2><p>Canvas 元素允许在网页上使用 JavaScript 绘制图形和动画。以下是一个简单的绘制矩形的示例：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myCanvas&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;200&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;200&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myCanvas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ctx.fillStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个示例中，使用 document.getElementById() 方法获取 Canvas 元素，并通过 getContext(“2d”) 获取 2D 绘图上下文。 然后，使用 fillStyle 属性设置填充颜色，fillRect() 方法绘制一个矩形。</p><h2 id="_13-什么是-data-属性" tabindex="-1">13.什么是 data-属性？ <a class="header-anchor" href="#_13-什么是-data-属性" aria-label="Permalink to &quot;13.什么是 data-属性？&quot;">​</a></h2><p>在 JavaScript 框架变得流行之前，前端开发者经常使用 data- 属性，把额外数据存储在 DOM 自身中。当时没有其他 Hack 手段（比如使用非标准属性或 DOM 上额外属性）。这样做是为了将自定义数据存储到页面或应用中，对此没有其他更适当的属性或元素。 而现在，不鼓励使用 data- 属性。原因之一是，用户可以通过在浏览器中利用检查元素，轻松地修改属性值，借此修改数据。数据模型最好存储在 JavaScript 本身中，并利用框架提供的数据绑定，使之与 DOM 保持更新。</p><h2 id="_14-请描述-cookie、sessionstorage-和-localstorage-的区别。" tabindex="-1">14.请描述 cookie、sessionStorage 和 localStorage 的区别。 <a class="header-anchor" href="#_14-请描述-cookie、sessionstorage-和-localstorage-的区别。" aria-label="Permalink to &quot;14.请描述 cookie、sessionStorage 和 localStorage 的区别。&quot;">​</a></h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">cookie</th><th style="text-align:center;">localStorage</th><th style="text-align:center;">sessionStorage</th></tr></thead><tbody><tr><td style="text-align:center;">由谁初始化</td><td style="text-align:center;">客户端或服务器，服务器可以使用 Set-Cookie 请求头。</td><td style="text-align:center;">客户端</td><td style="text-align:center;">客户端</td></tr><tr><td style="text-align:center;">过期时间</td><td style="text-align:center;">手动设置</td><td style="text-align:center;">永不过期</td><td style="text-align:center;">当前页面关闭时</td></tr><tr><td style="text-align:center;">在当前浏览器会话（browser sessions）中是否保持不变</td><td style="text-align:center;">取决于是否设置了过期时间</td><td style="text-align:center;">是</td><td style="text-align:center;">否</td></tr><tr><td style="text-align:center;">是否随着每个 HTTP 请求发送给服务器</td><td style="text-align:center;">是，Cookies 会通过 Cookie 请求头，自动发送给服务器</td><td style="text-align:center;">否</td><td style="text-align:center;">否</td></tr><tr><td style="text-align:center;">容量（每个域名）</td><td style="text-align:center;">4kb</td><td style="text-align:center;">5MB</td><td style="text-align:center;">5MB</td></tr><tr><td style="text-align:center;">访问权限</td><td style="text-align:center;">任意窗口</td><td style="text-align:center;">任意窗口</td><td style="text-align:center;">当前页面窗口</td></tr></tbody></table><h2 id="_15-请描述-script、script-async-和-script-defer-的区别。" tabindex="-1">15.请描述 script、script async 和 script defer 的区别。 <a class="header-anchor" href="#_15-请描述-script、script-async-和-script-defer-的区别。" aria-label="Permalink to &quot;15.请描述 script、script async 和 script defer 的区别。&quot;">​</a></h2><ul><li><code>&lt;script&gt;</code> - HTML 解析中断，脚本被提取并立即执行。执行结束后，HTML 解析继续。</li><li><code>&lt;script async&gt;</code> - 脚本的提取、执行的过程与 HTML 解析过程并行，脚本执行完毕可能在 HTML 解析完毕之前。当脚本与页面上其他脚本独立时，可以使用 async，比如用作页面统计分析。</li><li><code>&lt;script defer&gt;</code> - 脚本仅提取过程与 HTML 解析过程并行，脚本的执行将在 HTML 解析完毕后进行。如果有多个含 defer 的脚本，脚本的执行顺序将按照在 document 中出现的位置，从上到下顺序执行。 注意：没有 src 属性的脚本，async 和 defer 属性会被忽略。</li></ul><h2 id="_16-为什么最好把-css-的-link-标签放在-head-之间-为什么最好把-js-的-script-标签恰好放在-body-之前-有例外情况吗" tabindex="-1">16.为什么最好把 CSS 的 link 标签放在 head 之间？为什么最好把 JS 的 script 标签恰好放在 body 之前，有例外情况吗？ <a class="header-anchor" href="#_16-为什么最好把-css-的-link-标签放在-head-之间-为什么最好把-js-的-script-标签恰好放在-body-之前-有例外情况吗" aria-label="Permalink to &quot;16.为什么最好把 CSS 的 link 标签放在 head 之间？为什么最好把 JS 的 script 标签恰好放在 body 之前，有例外情况吗？&quot;">​</a></h2><p>把 <code>&lt;link&gt;</code> 标签放在 <code>&lt;head&gt;&lt;/head&gt;</code> 之间是规范要求的内容。此外，这种做法可以让页面逐步呈现，提高了用户体验。将样式表放在文档底部附近，会使许多浏览器（包括 Internet Explorer）不能逐步呈现页面。一些浏览器会阻止渲染，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。 把 <code>&lt;script&gt;</code> 标签恰好放在 <code>&lt;/body&gt;</code> 之前 脚本在下载和执行期间会阻止 HTML 解析。把 <code>&lt;script&gt;</code> 标签放在底部，保证 HTML 首先完成解析，将页面尽早呈现给用户。 例外情况是当你的脚本里包含 document.write() 时。但是现在，document.write() 不推荐使用。同时，将 <code>&lt;script&gt;</code> 标签放在底部，意味着浏览器不能开始下载脚本，直到整个文档 （document） 被解析。也许，对此比较好的做法是，<code>&lt;script&gt;</code> 使用 defer 属性，放在 <code>&lt;head&gt;</code> 中。</p><h2 id="_17-你用过哪些-html5-标签" tabindex="-1">17. 你用过哪些 HTML5 标签 <a class="header-anchor" href="#_17-你用过哪些-html5-标签" aria-label="Permalink to &quot;17. 你用过哪些 HTML5 标签&quot;">​</a></h2><h3 id="语义化标签" tabindex="-1">语义化标签 <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;语义化标签&quot;">​</a></h3><h4 id="表示结构的标签" tabindex="-1">表示结构的标签 <a class="header-anchor" href="#表示结构的标签" aria-label="Permalink to &quot;表示结构的标签&quot;">​</a></h4><p><code>&lt;header&gt;</code> <code>&lt;nav&gt;</code> <code>&lt;main&gt;</code> <code>&lt;article&gt;</code> <code>&lt;section&gt;</code> <code>&lt;aside&gt;</code> <code>&lt;footer&gt;</code></p><h4 id="表示文字形式" tabindex="-1">表示文字形式 <a class="header-anchor" href="#表示文字形式" aria-label="Permalink to &quot;表示文字形式&quot;">​</a></h4><p><code>&lt;data&gt;</code> 举例：展示了一些产品名称，而且每个名称都和一个产品编码相关联。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;398&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;迷你番茄酱&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;399&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;巨无霸番茄酱&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;400&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;超级巨无霸番茄酱&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>&lt;time&gt;</code>：表示日期和时间值，机器读取通过 datetime 属性指定。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;The concert took place on &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">time</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> datetime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2001-05-15 19:00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;May 15&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>&lt;mark&gt;</code> ：用于高亮文本</p><h3 id="嵌入内容" tabindex="-1">嵌入内容 <a class="header-anchor" href="#嵌入内容" aria-label="Permalink to &quot;嵌入内容&quot;">​</a></h3><p><code>&lt;video&gt;</code>：视频播放。<br><code>&lt;audio&gt;</code>：音频播放。<br><code>&lt;canvas&gt;</code>：通过 JavaScript 和 HTML 的 <code>&lt;canvas&gt;</code> 元素来绘制图形。</p><h2 id="_18-h5-是什么" tabindex="-1">18.H5 是什么 <a class="header-anchor" href="#_18-h5-是什么" aria-label="Permalink to &quot;18.H5 是什么&quot;">​</a></h2><p>简单粗暴：就是一种移动端页面<br> 深入点：微信上的一种移动营销页面<br> 总之不是 HTML5</p>`,64),n=[l];function h(r,d,p,k,o,c){return s(),a("div",null,n)}const u=i(e,[["render",h]]);export{g as __pageData,u as default};
